import{G as p,S as v,c as D,b as g,B as w,F as x,L as B,g as f,p as F,M as S,D as L,j as A,C as R,l as _,W as C,O as I,n as P,q as V,r as G,s as H,i as T}from"./OrbitControls-B7EN8c73.js";class q{constructor(){console.log("MHD: Starting initialization..."),this.mu0=4*Math.PI*1e-7,this.epsilon0=8854e-15,this.c=3e8,this.k_B=138e-25,this.m_p=167e-29,this.e=16e-20,this.earthRadius=6371e3,this.earthDipole=79e21,this.swDensity=5e6,this.swVelocity=4e5,this.swTemperature=1e5,this.swBField=5e-9,this.nx=32,this.ny=16,this.nz=16,this.xmin=-30*this.earthRadius,this.xmax=10*this.earthRadius,this.ymin=-20*this.earthRadius,this.ymax=20*this.earthRadius,this.zmin=-20*this.earthRadius,this.zmax=20*this.earthRadius,this.dx=(this.xmax-this.xmin)/(this.nx-1),this.dy=(this.ymax-this.ymin)/(this.ny-1),this.dz=(this.zmax-this.zmin)/(this.nz-1),console.log("MHD: Initializing fields..."),this.initializeFields(),console.log("MHD: Initialization complete")}initializeFields(){this.rho=[],this.vx=[],this.vy=[],this.vz=[],this.Bx=[],this.By=[],this.Bz=[],this.p=[],this.Ex=[],this.Ey=[],this.Ez=[];for(let t=0;t<this.nx;t++){this.rho[t]=[],this.vx[t]=[],this.vy[t]=[],this.vz[t]=[],this.Bx[t]=[],this.By[t]=[],this.Bz[t]=[],this.p[t]=[],this.Ex[t]=[],this.Ey[t]=[],this.Ez[t]=[];for(let s=0;s<this.ny;s++)this.rho[t][s]=new Float32Array(this.nz),this.vx[t][s]=new Float32Array(this.nz),this.vy[t][s]=new Float32Array(this.nz),this.vz[t][s]=new Float32Array(this.nz),this.Bx[t][s]=new Float32Array(this.nz),this.By[t][s]=new Float32Array(this.nz),this.Bz[t][s]=new Float32Array(this.nz),this.p[t][s]=new Float32Array(this.nz),this.Ex[t][s]=new Float32Array(this.nz),this.Ey[t][s]=new Float32Array(this.nz),this.Ez[t][s]=new Float32Array(this.nz)}this.setInitialConditions()}setInitialConditions(){for(let t=0;t<this.nx;t++)for(let s=0;s<this.ny;s++)for(let i=0;i<this.nz;i++){const e=this.xmin+t*this.dx,n=this.ymin+s*this.dy,a=this.zmin+i*this.dz,l=Math.sqrt(e*e+n*n+a*a);this.rho[t][s][i]=this.swDensity*this.m_p,this.vx[t][s][i]=-this.swVelocity,this.vy[t][s][i]=0,this.vz[t][s][i]=0;const r=this.swDensity;if(this.p[t][s][i]=r*this.k_B*this.swTemperature,l>3*this.earthRadius)this.Bx[t][s][i]=this.swBField,this.By[t][s][i]=this.swBField*.1,this.Bz[t][s][i]=0;else{const h=this.calculateDipoleField(e,n,a);this.Bx[t][s][i]=h.x,this.By[t][s][i]=h.y,this.Bz[t][s][i]=h.z}this.Ex[t][s][i]=this.vy[t][s][i]*this.Bz[t][s][i]-this.vz[t][s][i]*this.By[t][s][i],this.Ey[t][s][i]=this.vz[t][s][i]*this.Bx[t][s][i]-this.vx[t][s][i]*this.Bz[t][s][i],this.Ez[t][s][i]=this.vx[t][s][i]*this.By[t][s][i]-this.vy[t][s][i]*this.Bx[t][s][i]}}calculateDipoleField(t,s,i){const e=Math.sqrt(t*t+s*s+i*i);if(e<this.earthRadius)return{x:0,y:0,z:0};const n=e*e*e,a=n*e*e,l=0,r=0,h=this.earthDipole,o=this.mu0/(4*Math.PI),d=l*t+r*s+h*i,m=o*(3*t*d/a-l/n),u=o*(3*s*d/a-r/n),c=o*(3*i*d/a-h/n);return{x:m,y:u,z:c}}step(t){const s=this.allocate3DArray(),i=this.allocate3DArray(),e=this.allocate3DArray(),n=this.allocate3DArray(),a=this.allocate3DArray(),l=this.allocate3DArray(),r=this.allocate3DArray();for(let h=1;h<this.nx-1;h++)for(let o=1;o<this.ny-1;o++)for(let d=1;d<this.nz-1;d++){const m=this.calculateDivergence(this.multiplyFields(this.rho,this.vx),this.multiplyFields(this.rho,this.vy),this.multiplyFields(this.rho,this.vz),h,o,d);s[h][o][d]=-m;const u=this.Bx[h][o][d]**2+this.By[h][o][d]**2+this.Bz[h][o][d]**2,c=this.p[h][o][d]+u/(2*this.mu0);i[h][o][d]=this.calculateMomentumDerivative("x",h,o,d,c),e[h][o][d]=this.calculateMomentumDerivative("y",h,o,d,c),n[h][o][d]=this.calculateMomentumDerivative("z",h,o,d,c),a[h][o][d]=0,l[h][o][d]=0,r[h][o][d]=0}for(let h=1;h<this.nx-1;h++)for(let o=1;o<this.ny-1;o++)for(let d=1;d<this.nz-1;d++)this.rho[h][o][d]+=t*s[h][o][d],this.vx[h][o][d]+=t*i[h][o][d],this.vy[h][o][d]+=t*e[h][o][d],this.vz[h][o][d]+=t*n[h][o][d],this.Bx[h][o][d]+=t*a[h][o][d],this.By[h][o][d]+=t*l[h][o][d],this.Bz[h][o][d]+=t*r[h][o][d],this.Ex[h][o][d]=this.vy[h][o][d]*this.Bz[h][o][d]-this.vz[h][o][d]*this.By[h][o][d],this.Ey[h][o][d]=this.vz[h][o][d]*this.Bx[h][o][d]-this.vx[h][o][d]*this.Bz[h][o][d],this.Ez[h][o][d]=this.vx[h][o][d]*this.By[h][o][d]-this.vy[h][o][d]*this.Bx[h][o][d];this.applyBoundaryConditions()}calculateDivergence(t,s,i,e,n,a){const l=(t[e+1][n][a]-t[e-1][n][a])/(2*this.dx),r=(s[e][n+1][a]-s[e][n-1][a])/(2*this.dy),h=(i[e][n][a+1]-i[e][n][a-1])/(2*this.dz);return l+r+h}calculateCurl(t,s,i,e){const n=(t.z[s][i+1][e]-t.z[s][i-1][e])/(2*this.dy),a=(t.y[s][i][e+1]-t.y[s][i][e-1])/(2*this.dz),l=(t.x[s][i][e+1]-t.x[s][i][e-1])/(2*this.dz),r=(t.z[s+1][i][e]-t.z[s-1][i][e])/(2*this.dx),h=(t.y[s+1][i][e]-t.y[s-1][i][e])/(2*this.dx),o=(t.x[s][i+1][e]-t.x[s][i-1][e])/(2*this.dy);return{x:n-a,y:l-r,z:h-o}}calculateCrossProduct(t,s){return{x:t.y*s.z-t.z*s.y,y:t.z*s.x-t.x*s.z,z:t.x*s.y-t.y*s.x}}calculateMomentumDerivative(t,s,i,e,n){const a=this.rho[s][i][e];this.vx[s][i][e],this.vy[s][i][e],this.vz[s][i][e];let l=0;return t==="x"?l=-((this.p[s+1][i][e]-this.p[s-1][i][e])/(2*this.dx))/a:t==="y"?l=-((this.p[s][i+1][e]-this.p[s][i-1][e])/(2*this.dy))/a:t==="z"&&(l=-((this.p[s][i][e+1]-this.p[s][i][e-1])/(2*this.dz))/a),l}partialDerivative(t,s,i,e,n){return s==="x"?(t[i+1][e][n]-t[i-1][e][n])/(2*this.dx):s==="y"?(t[i][e+1][n]-t[i][e-1][n])/(2*this.dy):s==="z"?(t[i][e][n+1]-t[i][e][n-1])/(2*this.dz):0}multiplyFields(t,s){const i=this.allocate3DArray();for(let e=0;e<this.nx;e++)for(let n=0;n<this.ny;n++)for(let a=0;a<this.nz;a++)i[e][n][a]=t[e][n][a]*s[e][n][a];return i}allocate3DArray(){const t=[];for(let s=0;s<this.nx;s++){t[s]=[];for(let i=0;i<this.ny;i++)t[s][i]=new Float32Array(this.nz)}return t}applyBoundaryConditions(){for(let t=0;t<this.ny;t++)for(let s=0;s<this.nz;s++)this.rho[0][t][s]=this.swDensity*this.m_p,this.vx[0][t][s]=-this.swVelocity,this.vy[0][t][s]=0,this.vz[0][t][s]=0,this.Bx[0][t][s]=this.swBField,this.By[0][t][s]=this.swBField*.1,this.Bz[0][t][s]=0,this.p[0][t][s]=this.swDensity*this.k_B*this.swTemperature;for(let t=0;t<this.ny;t++)for(let s=0;s<this.nz;s++)this.copyBoundary(this.nx-1,t,s,this.nx-2,t,s),t===0&&this.copyBoundary(0,0,s,0,1,s),t===this.ny-1&&this.copyBoundary(0,this.ny-1,s,0,this.ny-2,s),s===0&&this.copyBoundary(0,t,0,0,t,1),s===this.nz-1&&this.copyBoundary(0,t,this.nz-1,0,t,this.nz-2);for(let t=0;t<this.nx;t++)for(let s=0;s<this.ny;s++)for(let i=0;i<this.nz;i++){const e=this.xmin+t*this.dx,n=this.ymin+s*this.dy,a=this.zmin+i*this.dz;if(Math.sqrt(e*e+n*n+a*a)<this.earthRadius){this.vx[t][s][i]=0,this.vy[t][s][i]=0,this.vz[t][s][i]=0;const r=this.calculateDipoleField(e,n,a);this.Bx[t][s][i]=r.x,this.By[t][s][i]=r.y,this.Bz[t][s][i]=r.z}}}copyBoundary(t,s,i,e,n,a){this.rho[t][s][i]=this.rho[e][n][a],this.vx[t][s][i]=this.vx[e][n][a],this.vy[t][s][i]=this.vy[e][n][a],this.vz[t][s][i]=this.vz[e][n][a],this.Bx[t][s][i]=this.Bx[e][n][a],this.By[t][s][i]=this.By[e][n][a],this.Bz[t][s][i]=this.Bz[e][n][a],this.p[t][s][i]=this.p[e][n][a]}calculateMagnetopause(){const t=this.mu0*this.earthDipole/(4*Math.PI*Math.pow(this.earthRadius,3)),s=this.swDensity*this.m_p*this.swVelocity*this.swVelocity;return Math.pow(t*t/(2*this.mu0*s),1/6)*this.earthRadius}getFieldAt(t,s,i){const e=Math.round((t-this.xmin)/this.dx),n=Math.round((s-this.ymin)/this.dy),a=Math.round((i-this.zmin)/this.dz);return e<0||e>=this.nx||n<0||n>=this.ny||a<0||a>=this.nz?null:{density:this.rho[e][n][a],velocity:{x:this.vx[e][n][a],y:this.vy[e][n][a],z:this.vz[e][n][a]},magneticField:{x:this.Bx[e][n][a],y:this.By[e][n][a],z:this.Bz[e][n][a]},electricField:{x:this.Ex[e][n][a],y:this.Ey[e][n][a],z:this.Ez[e][n][a]},pressure:this.p[e][n][a]}}}class M{constructor(t){console.log("MHDVis: Starting visualization..."),this.mhd=t,this.group=new p,this.scale=1/this.mhd.earthRadius,console.log("MHDVis: Creating Earth..."),this.createEarth(),console.log("MHDVis: Creating field lines..."),this.createFieldLines(),console.log("MHDVis: Creating streamlines..."),this.createStreamlines(),console.log("MHDVis: Creating pressure contours..."),this.createPressureContours(),console.log("MHDVis: Creating magnetopause..."),this.createMagnetopause(),console.log("MHDVis: Visualization complete")}createEarth(){const t=new v(1,32,32),s=new D({color:2241535,emissive:1122884,shininess:10});this.earth=new g(t,s),this.group.add(this.earth)}createFieldLines(){this.fieldLineGroup=new p;const t=[];for(let s=-60;s<=60;s+=30)for(let i=0;i<360;i+=60){const e=s*Math.PI/180,n=i*Math.PI/180,a=2,l=a*Math.cos(e)*Math.cos(n),r=a*Math.cos(e)*Math.sin(n),h=a*Math.sin(e);t.push({x:l,y:r,z:h})}t.forEach(s=>{const i=this.traceFieldLine(s,500);if(i.length>10){const e=new w,n=[];i.forEach(r=>{n.push(r.x,r.y,r.z)}),e.setAttribute("position",new x(n,3));const a=new B({color:16777215,transparent:!0,opacity:.4}),l=new f(e,a);this.fieldLineGroup.add(l)}}),this.group.add(this.fieldLineGroup)}traceFieldLine(t,s){const i=[];let e={...t};const n=.1;for(let a=0;a<s;a++){i.push({...e});const l=this.mhd.getFieldAt(e.x*this.mhd.earthRadius,e.y*this.mhd.earthRadius,e.z*this.mhd.earthRadius);if(!l)break;const r=l.magneticField,h=Math.sqrt(r.x*r.x+r.y*r.y+r.z*r.z);if(h<1e-12)break;e.x+=n*r.x/h,e.y+=n*r.y/h,e.z+=n*r.z/h;const o=Math.sqrt(e.x*e.x+e.y*e.y+e.z*e.z);if(o<1||o>30)break}return i}createStreamlines(){this.streamlineGroup=new p;const t=[];for(let s=-20;s<=5;s+=5)for(let i=-10;i<=10;i+=5){const n=this.traceStreamline({x:s,y:i,z:0},200);n.length>10&&t.push(n)}t.forEach(s=>{const i=new w,e=[],n=[];s.forEach((r,h)=>{e.push(r.x,r.y,r.z);const o=Math.sqrt(r.vx*r.vx+r.vy*r.vy+r.vz*r.vz),d=Math.min(o/this.mhd.swVelocity,1);n.push(d,.5,1-d)}),i.setAttribute("position",new x(e,3)),i.setAttribute("color",new x(n,3));const a=new B({vertexColors:!0,transparent:!0,opacity:.6}),l=new f(i,a);this.streamlineGroup.add(l)}),this.group.add(this.streamlineGroup)}traceStreamline(t,s){const i=[];let e={...t};const n=.05;for(let a=0;a<s;a++){const l=this.mhd.getFieldAt(e.x*this.mhd.earthRadius,e.y*this.mhd.earthRadius,e.z*this.mhd.earthRadius);if(!l)break;const r=l.velocity;if(Math.sqrt(r.x*r.x+r.y*r.y+r.z*r.z)<1e3)break;i.push({x:e.x,y:e.y,z:e.z,vx:r.x,vy:r.y,vz:r.z}),e.x+=n*r.x/this.mhd.earthRadius,e.y+=n*r.y/this.mhd.earthRadius,e.z+=n*r.z/this.mhd.earthRadius;const o=Math.sqrt(e.x*e.x+e.y*e.y+e.z*e.z);if(o<1.1||o>30)break}return i}createPressureContours(){this.pressureGroup=new p;const t=100,s=100,i=new F(40,40,t-1,s-1),e=i.attributes.position.array,n=new Float32Array(e.length);for(let r=0;r<t;r++)for(let h=0;h<s;h++){const o=(r*s+h)*3,d=(r/(t-1)-.5)*40-10,m=(h/(s-1)-.5)*40,u=0;e[o]=d,e[o+1]=m,e[o+2]=u;const c=this.mhd.getFieldAt(d*this.mhd.earthRadius,m*this.mhd.earthRadius,u*this.mhd.earthRadius);if(c){const E=c.pressure/(this.mhd.swDensity*this.mhd.k_B*this.mhd.swTemperature),b=Math.log10(Math.max(E,.1)),z=Math.max(0,Math.min(1,(b+1)/2));n[o]=z,n[o+1]=.5*(1-z),n[o+2]=1-z}else n[o]=0,n[o+1]=0,n[o+2]=0}i.setAttribute("color",new x(n,3));const a=new S({vertexColors:!0,transparent:!0,opacity:.3,side:L}),l=new g(i,a);this.pressureGroup.add(l),this.group.add(this.pressureGroup)}createMagnetopause(){this.magnetopauseGroup=new p;const t=this.mhd.calculateMagnetopause()/this.mhd.earthRadius,s=new v(t,32,32,0,Math.PI),i=new S({color:65280,transparent:!0,opacity:.2,wireframe:!0}),e=new g(s,i);this.magnetopauseGroup.add(e),this.group.add(this.magnetopauseGroup)}update(){}showFieldLines(t){this.fieldLineGroup.visible=t}showStreamlines(t){this.streamlineGroup.visible=t}showPressure(t){this.pressureGroup.visible=t}showMagnetopause(t){this.magnetopauseGroup.visible=t}}class W{constructor(){this.init(),this.createScene(),this.setupControls(),this.animate()}init(){this.scene=new A,this.scene.background=new R(17),this.camera=new _(45,window.innerWidth/window.innerHeight,.1,1e3),this.camera.position.set(30,20,30),this.camera.lookAt(0,0,0),this.renderer=new C({antialias:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(this.renderer.domElement),this.controls=new I(this.camera,this.renderer.domElement),this.controls.enableDamping=!0,this.controls.dampingFactor=.05;const t=new P(4210752);this.scene.add(t);const s=new V(16777215,.5);s.position.set(1,1,0),this.scene.add(s),window.addEventListener("resize",()=>this.onWindowResize())}createScene(){this.mhdSim=new q,this.mhdVis=new M(this.mhdSim),this.scene.add(this.mhdVis.group);const t=new G(10);this.scene.add(t);const s=new H(40,40);s.rotation.x=Math.PI/2,this.scene.add(s),this.clock=new T,this.simulationTime=0,this.timeStep=.01,this.isPaused=!1}setupControls(){const t=document.createElement("div");t.style.position="absolute",t.style.top="10px",t.style.right="10px",t.style.background="rgba(0, 0, 0, 0.8)",t.style.color="white",t.style.padding="15px",t.style.borderRadius="5px",t.style.fontFamily="Arial",t.innerHTML=`
            <h3>MHD Simulation Controls</h3>
            <div>
                <label>
                    <input type="checkbox" id="showFieldLines" checked> Field Lines
                </label>
            </div>
            <div>
                <label>
                    <input type="checkbox" id="showStreamlines" checked> Streamlines
                </label>
            </div>
            <div>
                <label>
                    <input type="checkbox" id="showPressure" checked> Pressure
                </label>
            </div>
            <div>
                <label>
                    <input type="checkbox" id="showMagnetopause" checked> Magnetopause
                </label>
            </div>
            <div style="margin-top: 10px;">
                <button id="pauseBtn">Pause</button>
                <button id="resetBtn">Reset</button>
            </div>
            <div style="margin-top: 10px;">
                <label>Solar Wind Speed: <span id="swSpeed">400</span> km/s</label>
                <input type="range" id="swSpeedSlider" min="200" max="800" value="400" style="width: 100%;">
            </div>
            <div>
                <label>Solar Wind Density: <span id="swDensity">5</span> /cm³</label>
                <input type="range" id="swDensitySlider" min="1" max="20" value="5" style="width: 100%;">
            </div>
            <div style="margin-top: 10px;">
                <h4>Grid Resolution</h4>
                <label>Grid Size: <span id="gridSize">32×16×16</span></label>
                <select id="gridSizeSelect" style="width: 100%; margin-top: 5px;">
                    <option value="16,8,8">16×8×8 (Fast)</option>
                    <option value="32,16,16" selected>32×16×16 (Medium)</option>
                    <option value="64,32,32">64×32×32 (High)</option>
                    <option value="128,64,64">128×64×64 (Very High)</option>
                </select>
                <button id="applyGridSize" style="margin-top: 5px; width: 100%;">Apply & Restart</button>
            </div>
            <div style="margin-top: 10px; font-size: 12px;">
                <div>Simulation Time: <span id="simTime">0.0</span> s</div>
                <div>Magnetopause: <span id="mpDist">0.0</span> R<sub>E</sub></div>
                <div>Grid Points: <span id="totalGridPoints">8192</span></div>
            </div>
        `,document.body.appendChild(t),document.getElementById("showFieldLines").addEventListener("change",s=>{this.mhdVis.showFieldLines(s.target.checked)}),document.getElementById("showStreamlines").addEventListener("change",s=>{this.mhdVis.showStreamlines(s.target.checked)}),document.getElementById("showPressure").addEventListener("change",s=>{this.mhdVis.showPressure(s.target.checked)}),document.getElementById("showMagnetopause").addEventListener("change",s=>{this.mhdVis.showMagnetopause(s.target.checked)}),document.getElementById("pauseBtn").addEventListener("click",()=>{this.isPaused=!this.isPaused,document.getElementById("pauseBtn").textContent=this.isPaused?"Resume":"Pause"}),document.getElementById("resetBtn").addEventListener("click",()=>{this.mhdSim.setInitialConditions(),this.simulationTime=0,this.updateVisualization()}),document.getElementById("swSpeedSlider").addEventListener("input",s=>{this.mhdSim.swVelocity=parseFloat(s.target.value)*1e3,document.getElementById("swSpeed").textContent=s.target.value}),document.getElementById("swDensitySlider").addEventListener("input",s=>{this.mhdSim.swDensity=parseFloat(s.target.value)*1e6,document.getElementById("swDensity").textContent=s.target.value}),document.getElementById("gridSizeSelect").addEventListener("change",s=>{const[i,e,n]=s.target.value.split(",").map(Number);document.getElementById("gridSize").textContent=`${i}×${e}×${n}`,document.getElementById("totalGridPoints").textContent=(i*e*n).toLocaleString()}),document.getElementById("applyGridSize").addEventListener("click",()=>{const[s,i,e]=document.getElementById("gridSizeSelect").value.split(",").map(Number),n=document.getElementById("applyGridSize");n.textContent="Restarting...",n.disabled=!0,setTimeout(()=>{this.mhdSim.nx=s,this.mhdSim.ny=i,this.mhdSim.nz=e,this.mhdSim.dx=(this.mhdSim.xmax-this.mhdSim.xmin)/(s-1),this.mhdSim.dy=(this.mhdSim.ymax-this.mhdSim.ymin)/(i-1),this.mhdSim.dz=(this.mhdSim.zmax-this.mhdSim.zmin)/(e-1),this.mhdSim.initializeFields(),this.simulationTime=0,this.updateVisualization(),n.textContent="Apply & Restart",n.disabled=!1},100)}),document.getElementById("totalGridPoints").textContent=(this.mhdSim.nx*this.mhdSim.ny*this.mhdSim.nz).toLocaleString()}animate(){if(requestAnimationFrame(()=>this.animate()),this.clock.getDelta(),!this.isPaused){const s=this.timeStep/10;for(let e=0;e<10;e++)this.mhdSim.step(s);this.simulationTime+=this.timeStep,Math.floor(this.simulationTime*10)%5===0&&this.updateVisualization(),document.getElementById("simTime").textContent=this.simulationTime.toFixed(1);const i=this.mhdSim.calculateMagnetopause()/this.mhdSim.earthRadius;document.getElementById("mpDist").textContent=i.toFixed(1)}this.controls.update(),this.renderer.render(this.scene,this.camera)}updateVisualization(){this.scene.remove(this.mhdVis.group),this.mhdVis=new M(this.mhdSim),this.scene.add(this.mhdVis.group),this.mhdVis.showFieldLines(document.getElementById("showFieldLines").checked),this.mhdVis.showStreamlines(document.getElementById("showStreamlines").checked),this.mhdVis.showPressure(document.getElementById("showPressure").checked),this.mhdVis.showMagnetopause(document.getElementById("showMagnetopause").checked)}onWindowResize(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}}window.addEventListener("DOMContentLoaded",()=>{try{console.log("Starting MHD simulation..."),new W}catch(y){console.error("Error starting MHD simulation:",y),document.body.innerHTML+=`<div style="color: red; padding: 20px;">Error: ${y.message}</div>`}});
